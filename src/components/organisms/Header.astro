---
import Icon from '../atoms/Icon.astro';
import Button from '../atoms/Button.astro';
import { useTranslations, getLangFromUrl, getLocalizedPath, type Language, languages } from '../../i18n';
import { getCollection } from 'astro:content';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Load categories from content collections
const restaurantCategories = await getCollection('restaurantCategories');
const accommodationCategories = await getCollection('accommodationCategories');
const activityCategories = await getCollection('activityCategories');
const serviceCategories = await getCollection('serviceCategories');

// Organize categories by parent
const organizeCategories = (categories: any[]) => {
  const topLevel = categories.filter(c => !c.data.parentId && c.data.published).sort((a, b) => (a.data.order || 0) - (b.data.order || 0));
  const childMap = new Map();
  
  categories.filter(c => c.data.parentId && c.data.published).forEach(child => {
    if (!childMap.has(child.data.parentId)) {
      childMap.set(child.data.parentId, []);
    }
    childMap.get(child.data.parentId).push(child);
  });
  
  return topLevel.map(parent => ({
    ...parent,
    children: (childMap.get(parent.data.id) || []).sort((a: any, b: any) => (a.data.order || 0) - (b.data.order || 0))
  }));
};

const restaurantCategoriesOrg = organizeCategories(restaurantCategories);
const accommodationCategoriesOrg = organizeCategories(accommodationCategories);
const activityCategoriesOrg = organizeCategories(activityCategories);
const serviceCategoriesOrg = organizeCategories(serviceCategories);
---

<header class="header">
  <div class="container">
    <div class="header-content">
      <!-- Logo -->
      <a href={getLocalizedPath('/', lang)} class="logo" aria-label={t('header.discover')}>
        <span class="logo-text">Salut Annecy</span>
      </a>

      <!-- Mobile Menu Toggle -->
      <button class="mobile-menu-toggle" aria-label="Toggle menu" id="mobile-menu-toggle">
        <Icon name="menu" size="md" />
      </button>

      <!-- Navigation -->
      <nav class="nav" id="main-nav" aria-label="Main navigation">
        <ul class="nav-list">
          <!-- Restaurants -->
          <li class="nav-item-with-dropdown">
            <button class="nav-dropdown-trigger" aria-label="Menu Restaurants">
              {t('header.restaurants')}
              <Icon name="chevron-down" size="sm" />
            </button>
            <div class="nav-dropdown">
              <a href={getLocalizedPath('/restaurants', lang)} class="dropdown-main-link">
                <strong>Tous les restaurants</strong>
              </a>
              <div class="dropdown-divider"></div>
              {restaurantCategoriesOrg.map(category => (
                <>
                  <div class="dropdown-section">
                    <h4>{category.data.name}</h4>
                    {category.children && category.children.length > 0 ? (
                      category.children.map((child: any) => (
                        <a href={getLocalizedPath(`/restaurants/${child.data.slug}`, lang)}>
                          {child.data.name}
                        </a>
                      ))
                    ) : (
                      <a href={getLocalizedPath(`/restaurants/${category.data.slug}`, lang)}>
                        {category.data.description || 'Voir tout'}
                      </a>
                    )}
                  </div>
                </>
              ))}
            </div>
          </li>

          <!-- Hébergements -->
          <li class="nav-item-with-dropdown">
            <button class="nav-dropdown-trigger" aria-label="Menu Hébergements">
              {t('header.accommodations')}
              <Icon name="chevron-down" size="sm" />
            </button>
            <div class="nav-dropdown">
              <a href={getLocalizedPath('/hebergements', lang)} class="dropdown-main-link">
                <strong>Tous les hébergements</strong>
              </a>
              <div class="dropdown-divider"></div>
              {accommodationCategoriesOrg.map(category => (
                <div class="dropdown-section">
                  <h4>{category.data.name}</h4>
                  {category.children && category.children.length > 0 ? (
                    category.children.map((child: any) => (
                      <a href={getLocalizedPath(`/hebergements/${child.data.slug}`, lang)}>
                        {child.data.name}
                      </a>
                    ))
                  ) : (
                    <a href={getLocalizedPath(`/hebergements/${category.data.slug}`, lang)}>
                      {category.data.description || 'Voir tout'}
                    </a>
                  )}
                </div>
              ))}
            </div>
          </li>

          <!-- Activités -->
          <li class="nav-item-with-dropdown">
            <button class="nav-dropdown-trigger" aria-label="Menu Activités">
              {t('header.activities')}
              <Icon name="chevron-down" size="sm" />
            </button>
            <div class="nav-dropdown">
              <a href={getLocalizedPath('/activites', lang)} class="dropdown-main-link">
                <strong>Toutes les activités</strong>
              </a>
              <div class="dropdown-divider"></div>
              {activityCategoriesOrg.map(category => (
                <div class="dropdown-section">
                  <h4>{category.data.name}</h4>
                  {category.children && category.children.length > 0 ? (
                    category.children.map((child: any) => (
                      <a href={getLocalizedPath(`/activites/${child.data.slug}`, lang)}>
                        {child.data.name}
                      </a>
                    ))
                  ) : (
                    <a href={getLocalizedPath(`/activites/${category.data.slug}`, lang)}>
                      {category.data.description || 'Voir tout'}
                    </a>
                  )}
                </div>
              ))}
            </div>
          </li>

          <!-- Sentiers -->
          <li class="nav-item">
            <a href={getLocalizedPath('/sentiers', lang)} class="nav-link">
              {t('header.trails')}
            </a>
          </li>

          <!-- Agenda -->
          <li class="nav-item">
            <a href={getLocalizedPath('/agenda', lang)} class="nav-link">
              {t('header.events')}
            </a>
          </li>

          <!-- Magazine -->
          <li class="nav-item">
            <a href={getLocalizedPath('/magazine', lang)} class="nav-link">
              {t('header.magazine')}
            </a>
          </li>
        </ul>
      </nav>

      <!-- Actions -->
      <div class="header-actions">
        <!-- Theme Toggle -->
        <button class="icon-button" aria-label="Toggle theme" onclick="window.toggleTheme()">
          <Icon name="sun" size="md" />
        </button>

        <!-- Language Selector -->
        <div class="language-selector">
          <button class="icon-button" aria-label="Change language" id="lang-toggle">
            <Icon name="globe" size="md" />
          </button>
          <div class="language-dropdown" id="lang-dropdown">
            {Object.entries(languages).map(([code, { name }]) => (
              <a
                href={getLocalizedPath(Astro.url.pathname, code as Language)}
                class={`language-option ${code === lang ? 'active' : ''}`}
                hreflang={code}
              >
                {name}
              </a>
            ))}
          </div>
        </div>

        <!-- User Menu (when logged in) -->
        <div class="user-menu" id="user-menu" style="display: none;">
          <button class="user-menu-trigger" id="user-menu-toggle" aria-label="Menu utilisateur">
            <Icon name="user" size="md" />
            <span class="user-name">Mon compte</span>
            <Icon name="chevron-down" size="sm" />
          </button>
          <div class="user-dropdown" id="user-dropdown">
            <a href={getLocalizedPath('/profil', lang)}>Mon profil</a>
            <a href={getLocalizedPath('/mes-annonces', lang)}>Mes annonces</a>
            <a href={getLocalizedPath('/mes-favoris', lang)}>Mes favoris</a>
            <a href={getLocalizedPath('/mes-messages', lang)}>Messages</a>
            <div class="dropdown-divider"></div>
            <a href={getLocalizedPath('/parametres', lang)}>Paramètres</a>
            <a href={getLocalizedPath('/deconnexion', lang)} class="logout-link">Déconnexion</a>
          </div>
        </div>

        <!-- Auth Buttons (when not logged in) -->
        <div class="auth-buttons" id="auth-buttons">
          <Button href={getLocalizedPath('/connexion', lang)} variant="ghost" size="sm">
            {t('header.login')}
          </Button>
          <Button href={getLocalizedPath('/inscription', lang)} variant="primary" size="sm">
            {t('header.signup')}
          </Button>
        </div>
      </div>
    </div>
  </div>
</header>

<style>
  .header {
    background-color: var(--color-surface);
    border-bottom: 1px solid var(--color-border);
    position: sticky;
    top: 0;
    z-index: var(--z-sticky);
    box-shadow: var(--shadow-sm);
  }

  .header-content {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: var(--spacing-4) 0;
    gap: var(--spacing-4);
  }

  .logo {
    text-decoration: none;
    display: flex;
    align-items: center;
    gap: var(--spacing-2);
  }

  .logo-text {
    font-size: var(--font-size-xl);
    font-weight: var(--font-weight-extrabold);
    color: var(--color-primary-600);
    background: linear-gradient(135deg, var(--color-primary-500), var(--color-secondary-500));
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .mobile-menu-toggle {
    display: none;
    background: none;
    border: none;
    cursor: pointer;
    color: var(--color-text-primary);
    padding: var(--spacing-2);
  }

  .nav {
    flex: 1;
    display: flex;
    justify-content: center;
  }

  .nav-list {
    display: flex;
    gap: var(--spacing-6);
    list-style: none;
    margin: 0;
    padding: 0;
    align-items: center;
  }

  .nav-list a {
    color: var(--color-text-secondary);
    font-weight: var(--font-weight-medium);
    font-size: var(--font-size-sm);
    text-decoration: none;
    padding: var(--spacing-2) var(--spacing-3);
    border-radius: var(--radius-base);
    transition: all var(--transition-fast);
    display: block;
  }

  .nav-list a:hover {
    color: var(--color-text-primary);
    background-color: var(--color-surface-secondary);
  }

  /* Dropdown Navigation */
  .nav-item-with-dropdown {
    position: relative;
  }

  .nav-dropdown-trigger {
    background: none;
    border: none;
    cursor: pointer;
    color: var(--color-text-secondary);
    font-weight: var(--font-weight-medium);
    font-size: var(--font-size-sm);
    padding: var(--spacing-2) var(--spacing-3);
    border-radius: var(--radius-base);
    transition: all var(--transition-fast);
    display: flex;
    align-items: center;
    gap: var(--spacing-1);
  }

  .nav-dropdown-trigger:hover {
    color: var(--color-text-primary);
    background-color: var(--color-surface-secondary);
  }

  .nav-dropdown {
    position: absolute;
    top: calc(100% + var(--spacing-2));
    left: 0;
    background-color: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: var(--radius-lg);
    box-shadow: var(--shadow-lg);
    min-width: 240px;
    display: none;
    flex-direction: column;
    z-index: var(--z-dropdown);
    padding: var(--spacing-3) 0;
  }

  .nav-item-with-dropdown:hover .nav-dropdown {
    display: flex;
  }

  .nav-dropdown a {
    padding: var(--spacing-2) var(--spacing-4);
    color: var(--color-text-secondary);
    text-decoration: none;
    transition: all var(--transition-fast);
    font-size: var(--font-size-sm);
  }

  .nav-dropdown a:hover {
    background-color: var(--color-surface-secondary);
    color: var(--color-text-primary);
  }

  .dropdown-section {
    padding: var(--spacing-2) 0;
  }

  .dropdown-section:not(:last-child) {
    border-bottom: 1px solid var(--color-border);
    margin-bottom: var(--spacing-2);
  }

  .dropdown-section h4 {
    padding: var(--spacing-2) var(--spacing-4);
    font-size: var(--font-size-xs);
    font-weight: var(--font-weight-bold);
    text-transform: uppercase;
    color: var(--color-text-primary);
    letter-spacing: 0.05em;
  }

  .dropdown-main-link {
    padding: var(--spacing-3) var(--spacing-4);
    color: var(--color-primary-600);
    text-decoration: none;
    transition: all var(--transition-fast);
    display: block;
  }

  .dropdown-main-link:hover {
    background-color: var(--color-surface-secondary);
  }

  .dropdown-divider {
    height: 1px;
    background-color: var(--color-border);
    margin: var(--spacing-2) 0;
  }

  .header-actions {
    display: flex;
    align-items: center;
    gap: var(--spacing-3);
  }

  .icon-button {
    background: none;
    border: none;
    cursor: pointer;
    color: var(--color-text-secondary);
    padding: var(--spacing-2);
    border-radius: var(--radius-base);
    transition: all var(--transition-fast);
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .icon-button:hover {
    background-color: var(--color-surface-secondary);
    color: var(--color-text-primary);
  }

  /* Language Selector */
  .language-selector {
    position: relative;
  }

  .language-dropdown {
    position: absolute;
    top: calc(100% + var(--spacing-2));
    right: 0;
    background-color: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: var(--radius-lg);
    box-shadow: var(--shadow-lg);
    min-width: 180px;
    display: none;
    flex-direction: column;
    z-index: var(--z-dropdown);
  }

  .language-dropdown.active {
    display: flex;
  }

  .language-option {
    padding: var(--spacing-3) var(--spacing-4);
    color: var(--color-text-secondary);
    text-decoration: none;
    transition: all var(--transition-fast);
    font-size: var(--font-size-sm);
  }

  .language-option:hover {
    background-color: var(--color-surface-secondary);
    color: var(--color-text-primary);
  }

  .language-option.active {
    color: var(--color-primary-600);
    font-weight: var(--font-weight-semibold);
    background-color: var(--color-primary-50);
  }

  /* User Menu */
  .user-menu {
    position: relative;
  }

  .user-menu-trigger {
    display: flex;
    align-items: center;
    gap: var(--spacing-2);
    background: none;
    border: none;
    cursor: pointer;
    color: var(--color-text-secondary);
    padding: var(--spacing-2) var(--spacing-3);
    border-radius: var(--radius-base);
    transition: all var(--transition-fast);
    font-size: var(--font-size-sm);
    font-weight: var(--font-weight-medium);
  }

  .user-menu-trigger:hover {
    background-color: var(--color-surface-secondary);
    color: var(--color-text-primary);
  }

  .user-name {
    max-width: 120px;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }

  .user-dropdown {
    position: absolute;
    top: calc(100% + var(--spacing-2));
    right: 0;
    background-color: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: var(--radius-lg);
    box-shadow: var(--shadow-lg);
    min-width: 200px;
    display: none;
    flex-direction: column;
    z-index: var(--z-dropdown);
    padding: var(--spacing-2) 0;
  }

  .user-dropdown.active {
    display: flex;
  }

  .user-dropdown a {
    padding: var(--spacing-3) var(--spacing-4);
    color: var(--color-text-secondary);
    text-decoration: none;
    transition: all var(--transition-fast);
    font-size: var(--font-size-sm);
  }

  .user-dropdown a:hover {
    background-color: var(--color-surface-secondary);
    color: var(--color-text-primary);
  }

  .user-dropdown .logout-link {
    color: var(--color-error-600);
  }

  .user-dropdown .logout-link:hover {
    background-color: var(--color-error-50);
    color: var(--color-error-700);
  }

  .dropdown-divider {
    height: 1px;
    background-color: var(--color-border);
    margin: var(--spacing-2) 0;
  }

  /* Mobile Responsive */
  @media (max-width: 1024px) {
    .mobile-menu-toggle {
      display: block;
    }

    .nav {
      display: none;
      position: absolute;
      top: 100%;
      left: 0;
      right: 0;
      background-color: var(--color-surface);
      border-bottom: 1px solid var(--color-border);
      box-shadow: var(--shadow-md);
      max-height: 80vh;
      overflow-y: auto;
    }

    .nav.active {
      display: block;
    }

    .nav-list {
      flex-direction: column;
      gap: 0;
      padding: var(--spacing-4);
      align-items: stretch;
    }

    .nav-list a {
      display: block;
      padding: var(--spacing-3) var(--spacing-4);
    }

    .nav-item-with-dropdown .nav-dropdown {
      position: static;
      box-shadow: none;
      border: none;
      border-left: 2px solid var(--color-primary-600);
      margin-left: var(--spacing-4);
      padding-left: var(--spacing-2);
      min-width: auto;
      max-width: none;
    }

    .nav-item-with-dropdown.active .nav-dropdown {
      display: flex;
    }

    .nav-dropdown-trigger {
      width: 100%;
      justify-content: space-between;
      padding: var(--spacing-3) var(--spacing-4);
    }

    /* Mega menu mobile adjustments */
    .mega-dropdown {
      padding: var(--spacing-2);
    }

    .mega-columns {
      grid-template-columns: 1fr;
      gap: var(--spacing-3);
    }

    .mega-title {
      font-size: var(--font-size-sm);
    }

    .dropdown-section h4,
    .mega-group h4 {
      font-size: var(--font-size-xs);
    }

    .header-actions {
      display: none;
    }

    .header-actions.mobile-active {
      display: flex;
    }
  }

  @media (max-width: 640px) {
    .header-content {
      padding: var(--spacing-3) 0;
    }

    .user-name {
      display: none;
    }
  }
</style>

<script>
  // Mobile menu toggle
  const mobileMenuToggle = document.getElementById('mobile-menu-toggle');
  const mainNav = document.getElementById('main-nav');

  mobileMenuToggle?.addEventListener('click', () => {
    mainNav?.classList.toggle('active');
  });

  // Mobile dropdown toggles
  document.addEventListener('DOMContentLoaded', () => {
    const dropdownTriggers = document.querySelectorAll('.nav-dropdown-trigger');
    
    dropdownTriggers.forEach(trigger => {
      trigger.addEventListener('click', (e) => {
        // Only handle clicks in mobile view
        if (window.innerWidth <= 1024) {
          e.preventDefault();
          const parent = trigger.closest('.nav-item-with-dropdown');
          parent?.classList.toggle('active');
        }
      });
    });
  });

  // Language dropdown toggle
  const langToggle = document.getElementById('lang-toggle');
  const langDropdown = document.getElementById('lang-dropdown');

  langToggle?.addEventListener('click', (e) => {
    e.stopPropagation();
    langDropdown?.classList.toggle('active');
  });

  // User menu dropdown toggle
  const userMenuToggle = document.getElementById('user-menu-toggle');
  const userDropdown = document.getElementById('user-dropdown');

  userMenuToggle?.addEventListener('click', (e) => {
    e.stopPropagation();
    userDropdown?.classList.toggle('active');
  });

  // Close dropdowns when clicking outside
  document.addEventListener('click', (e) => {
    const target = e.target as Node;
    
    if (!langToggle?.contains(target)) {
      langDropdown?.classList.remove('active');
    }
    
    if (!userMenuToggle?.contains(target)) {
      userDropdown?.classList.remove('active');
    }
  });

  // Simulate user authentication state (for demo purposes)
  // In production, this would be determined by actual auth state
  const isLoggedIn = false; // Change to true to see user menu
  
  if (isLoggedIn) {
    document.getElementById('user-menu')?.style.setProperty('display', 'block');
    document.getElementById('auth-buttons')?.style.setProperty('display', 'none');
  }
</script>
