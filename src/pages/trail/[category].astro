---
import MainLayout from '../../layouts/MainLayout.astro';
import Card from '../../components/molecules/Card.astro';
import Icon from '../../components/atoms/Icon.astro';
import { useTranslations, getLangFromUrl, getLocalizedPath } from '../../i18n';
import { getCollection } from 'astro:content';

export async function getStaticPaths() {
  const allTrailCategories = await getCollection('trailCategories');
  const allTrails = await getCollection('trails');
  
  // Only use French categories for routing (default language)
  const frenchCategories = allTrailCategories.filter((cat: any) => cat.data.lang === 'fr');
  
  return frenchCategories.map(category => ({
    params: { category: category.data.slug },
    props: { 
      category,
      trails: allTrails.filter((trail: any) => 
        trail.data.difficulty === category.data.id && trail.data.published
      )
    },
  }));
}

const { category, trails } = Astro.props;
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Collect all unique attributes for filter options
const allAttributes = new Set<string>();
trails.forEach((trail: any) => {
  if (trail.data.attributes) {
    trail.data.attributes.forEach((attr: string) => allAttributes.add(attr));
  }
});
---

<MainLayout 
  title={`Sentiers ${category.data.name} - Salut Annecy`} 
  description={category.data.description || `Découvrez nos sentiers de difficulté ${category.data.name}`}
  lang={lang}
>
  <section class="page-header">
    <div class="container">
      <nav class="breadcrumb">
        <a href={getLocalizedPath('/trail', lang)}>{t('header.trails')}</a>
        <span>/</span>
        <span>{category.data.name}</span>
      </nav>
      <h1>Sentiers {category.data.name}</h1>
      {category.data.description && (
        <p class="subtitle">{category.data.description}</p>
      )}
    </div>
  </section>

  <section class="content-section">
    <div class="container">
      <div class="content-layout">
        <!-- Sidebar Filters (Attribute-based) -->
        {allAttributes.size > 0 && (
          <aside class="filters-sidebar">
            <h2 class="sidebar-title">{t('filters.filter_by')}</h2>
            
            <!-- Attribute Filter -->
            <div class="filter-section">
              <h3 class="filter-title">{t('filters.attributes')}</h3>
              <div class="filter-options">
                <a 
                  href={getLocalizedPath(`/trail/${category.data.slug}`, lang)} 
                  class="filter-option active"
                >
                  {t('filters.all')}
                </a>
                {Array.from(allAttributes).sort().map((attr: string) => (
                  <label class="filter-checkbox">
                    <input type="checkbox" value={attr} class="attribute-filter" />
                    <span>{attr}</span>
                  </label>
                ))}
              </div>
            </div>
          </aside>
        )}

        <!-- Trails Grid -->
        <div class="main-content">
          {trails.length > 0 ? (
            <div class="trails-grid" id="trails-grid">
              {trails.map((trail: any) => (
                <Card 
                  href={getLocalizedPath(`/sentiers/${trail.data.id}`, lang)} 
                  hoverable={true}
                  class="trail-card"
                  data-attributes={trail.data.attributes ? trail.data.attributes.join(',') : ''}
                >
                  <div class="trail-image">
                    <img src={trail.data.imageUrl} alt={trail.data.name} />
                    <div class="trail-difficulty" data-difficulty={trail.data.difficulty}>
                      {trail.data.difficulty}
                    </div>
                  </div>
                  <div class="trail-content">
                    <h3 class="trail-name">{trail.data.name}</h3>
                    <p class="trail-excerpt">{trail.data.excerpt}</p>
                    <div class="trail-stats">
                      <div class="trail-stat">
                        <Icon name="map-pin" size="sm" />
                        <span>{trail.data.distance}</span>
                      </div>
                      <div class="trail-stat">
                        <Icon name="clock" size="sm" />
                        <span>{trail.data.duration}</span>
                      </div>
                      {trail.data.elevation && (
                        <div class="trail-stat">
                          <Icon name="trending-up" size="sm" />
                          <span>{trail.data.elevation}</span>
                        </div>
                      )}
                    </div>
                    {trail.data.attributes && trail.data.attributes.length > 0 && (
                      <div class="trail-attributes">
                        {trail.data.attributes.slice(0, 3).map((attr: string) => (
                          <span class="attribute-tag">{attr}</span>
                        ))}
                      </div>
                    )}
                  </div>
                </Card>
              ))}
            </div>
          ) : (
            <div class="empty-state">
              <Icon name="hiking" size="xl" />
              <h3>Aucun sentier dans cette catégorie</h3>
              <p>Revenez bientôt pour découvrir nos recommandations !</p>
              <a href={getLocalizedPath('/trail', lang)} class="back-link">
                Retour aux sentiers
              </a>
            </div>
          )}
        </div>
      </div>
    </div>
  </section>
</MainLayout>

<script>
  // Client-side filtering by attributes
  document.addEventListener('DOMContentLoaded', () => {
    const checkboxes = document.querySelectorAll('.attribute-filter');
    const trailsGrid = document.getElementById('trails-grid');
    
    if (!trailsGrid || checkboxes.length === 0) return;
    
    checkboxes.forEach(checkbox => {
      checkbox.addEventListener('change', () => {
        const selectedAttributes = Array.from(checkboxes)
          .filter((cb: any) => cb.checked)
          .map((cb: any) => cb.value.toLowerCase());
        
        const trails = trailsGrid.querySelectorAll('.trail-card');
        
        trails.forEach((trail: any) => {
          const trailAttributes = (trail.getAttribute('data-attributes') || '')
            .toLowerCase()
            .split(',')
            .filter((a: string) => a.trim());
          
          if (selectedAttributes.length === 0) {
            trail.style.display = '';
          } else {
            const hasMatch = selectedAttributes.some(attr => 
              trailAttributes.some((ta: string) => ta.includes(attr))
            );
            trail.style.display = hasMatch ? '' : 'none';
          }
        });
      });
    });
  });
</script>

<style>
  .page-header {
    background: linear-gradient(135deg, var(--color-primary-100), var(--color-secondary-100));
    padding: var(--spacing-12) 0 var(--spacing-8);
    text-align: center;
  }

  .breadcrumb {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: var(--spacing-2);
    font-size: var(--font-size-sm);
    margin-bottom: var(--spacing-4);
    color: var(--color-text-secondary);
  }

  .breadcrumb a {
    color: var(--color-primary-600);
    text-decoration: none;
  }

  .breadcrumb a:hover {
    text-decoration: underline;
  }

  .page-header h1 {
    font-size: var(--font-size-4xl);
    margin-bottom: var(--spacing-4);
    color: var(--color-text-primary);
  }

  .subtitle {
    font-size: var(--font-size-lg);
    color: var(--color-text-secondary);
    max-width: 600px;
    margin: 0 auto;
  }

  .content-section {
    padding: var(--spacing-12) 0;
  }

  .content-layout {
    display: grid;
    grid-template-columns: 280px 1fr;
    gap: var(--spacing-8);
  }

  .filters-sidebar {
    background: var(--color-surface);
    padding: var(--spacing-6);
    border-radius: var(--radius-lg);
    height: fit-content;
    position: sticky;
    top: var(--spacing-8);
  }

  .sidebar-title {
    font-size: var(--font-size-lg);
    margin-bottom: var(--spacing-4);
    color: var(--color-text-primary);
  }

  .filter-section {
    margin-bottom: var(--spacing-6);
  }

  .filter-title {
    font-size: var(--font-size-md);
    font-weight: 600;
    margin-bottom: var(--spacing-3);
    color: var(--color-text-primary);
  }

  .filter-options {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-2);
  }

  .filter-option {
    padding: var(--spacing-2) var(--spacing-3);
    border-radius: var(--radius-md);
    text-decoration: none;
    color: var(--color-text-secondary);
    transition: background-color 0.2s, color 0.2s;
  }

  .filter-option:hover {
    background: var(--color-primary-100);
    color: var(--color-primary-600);
  }

  .filter-option.active {
    background: var(--color-primary-100);
    color: var(--color-primary-600);
    font-weight: 600;
  }

  .filter-checkbox {
    display: flex;
    align-items: center;
    gap: var(--spacing-2);
    padding: var(--spacing-2);
    cursor: pointer;
  }

  .filter-checkbox:hover {
    background: var(--color-primary-50);
    border-radius: var(--radius-md);
  }

  .filter-checkbox input[type="checkbox"] {
    cursor: pointer;
  }

  .main-content {
    min-width: 0;
  }

  .trails-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
    gap: var(--spacing-6);
  }

  .trail-card {
    background: var(--color-surface);
    border-radius: var(--radius-lg);
    overflow: hidden;
    transition: transform 0.2s, box-shadow 0.2s;
  }

  .trail-card:hover {
    transform: translateY(-4px);
    box-shadow: var(--shadow-lg);
  }

  .trail-image {
    position: relative;
    width: 100%;
    height: 200px;
    overflow: hidden;
  }

  .trail-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .trail-difficulty {
    position: absolute;
    top: var(--spacing-4);
    right: var(--spacing-4);
    padding: var(--spacing-2) var(--spacing-4);
    background: rgba(255, 255, 255, 0.9);
    border-radius: var(--radius-full);
    font-size: var(--font-size-sm);
    font-weight: 600;
    text-transform: capitalize;
  }

  .trail-difficulty[data-difficulty="facile"] {
    color: var(--color-success-600);
  }

  .trail-difficulty[data-difficulty="moyen"] {
    color: var(--color-warning-600);
  }

  .trail-difficulty[data-difficulty="difficile"] {
    color: var(--color-error-600);
  }

  .trail-content {
    padding: var(--spacing-6);
  }

  .trail-name {
    font-size: var(--font-size-lg);
    margin-bottom: var(--spacing-2);
    color: var(--color-text-primary);
  }

  .trail-excerpt {
    font-size: var(--font-size-sm);
    color: var(--color-text-secondary);
    margin-bottom: var(--spacing-4);
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .trail-stats {
    display: flex;
    gap: var(--spacing-4);
    flex-wrap: wrap;
    margin-bottom: var(--spacing-3);
  }

  .trail-stat {
    display: flex;
    align-items: center;
    gap: var(--spacing-2);
    font-size: var(--font-size-sm);
    color: var(--color-text-secondary);
  }

  .trail-attributes {
    display: flex;
    gap: var(--spacing-2);
    flex-wrap: wrap;
  }

  .attribute-tag {
    font-size: var(--font-size-xs);
    padding: var(--spacing-1) var(--spacing-2);
    background: var(--color-primary-100);
    color: var(--color-primary-600);
    border-radius: var(--radius-sm);
  }

  .empty-state {
    text-align: center;
    padding: var(--spacing-16) var(--spacing-6);
  }

  .empty-state h3 {
    font-size: var(--font-size-xl);
    margin: var(--spacing-4) 0 var(--spacing-2);
    color: var(--color-text-primary);
  }

  .empty-state p {
    color: var(--color-text-secondary);
    margin-bottom: var(--spacing-4);
  }

  .back-link {
    display: inline-block;
    padding: var(--spacing-3) var(--spacing-6);
    background: var(--color-primary-600);
    color: white;
    border-radius: var(--radius-md);
    text-decoration: none;
    transition: background-color 0.2s;
  }

  .back-link:hover {
    background: var(--color-primary-700);
  }

  @media (max-width: 1024px) {
    .content-layout {
      grid-template-columns: 1fr;
    }

    .filters-sidebar {
      position: static;
    }
  }

  @media (max-width: 768px) {
    .page-header h1 {
      font-size: var(--font-size-3xl);
    }

    .trails-grid {
      grid-template-columns: 1fr;
    }
  }
</style>
