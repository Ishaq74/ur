---
import MainLayout from '../../../layouts/MainLayout.astro';
import Card from '../../../components/molecules/Card.astro';
import Icon from '../../../components/atoms/Icon.astro';
import { useTranslations, getLangFromUrl, getLocalizedPath } from '../../../i18n';
import { getCollection } from 'astro:content';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Get filters from URL
const categoryFilter = Astro.url.searchParams.get('cat');
const attributeFilter = Astro.url.searchParams.get('attr');
const priceFilter = Astro.url.searchParams.get('price');
const ratingFilter = Astro.url.searchParams.get('rating');

// Get accommodations from new collection first, fallback to legacy places
const newAccommodations = await getCollection('accommodations');
const legacyPlaces = await getCollection('places');
const accommodationCategories = await getCollection('accommodationCategories');

// Combine both sources
const allAccommodations = [
  ...newAccommodations.map((a: any) => ({ ...a, isNew: true })),
  ...legacyPlaces.filter((p: any) => p.data.mainCategory === 'hebergement').map((p: any) => ({ ...p, isNew: false }))
];

// Filter accommodations
let accommodations = allAccommodations.filter((a: any) => a.data.published);

// Category filter
if (categoryFilter) {
  accommodations = accommodations.filter((a: any) => {
    if (a.isNew) {
      return a.data.categoryId === categoryFilter;
    } else {
      return a.data.category.toLowerCase().includes(categoryFilter.toLowerCase());
    }
  });
}

// Attribute filter
if (attributeFilter) {
  accommodations = accommodations.filter((a: any) => 
    a.data.attributes && a.data.attributes.some((attr: string) => 
      attr.toLowerCase().includes(attributeFilter.toLowerCase())
    )
  );
}

// Price range filter
if (priceFilter) {
  accommodations = accommodations.filter((a: any) => a.data.priceRange === priceFilter);
}

// Rating filter
if (ratingFilter) {
  const minRating = parseFloat(ratingFilter);
  accommodations = accommodations.filter((a: any) => a.data.rating && a.data.rating >= minRating);
}

// Get category name if filtering
let categoryName = t('common.all_accommodations');
if (categoryFilter) {
  const category = accommodationCategories.find(c => c.data.slug === categoryFilter || c.data.id === categoryFilter);
  if (category) {
    categoryName = category.data.name;
  }
}

// Collect all unique attributes and price ranges for filter options
const allAttributes = new Set<string>();
const allPriceRanges = new Set<string>();
allAccommodations.forEach((a: any) => {
  if (a.data.attributes) {
    a.data.attributes.forEach((attr: string) => allAttributes.add(attr));
  }
  if (a.data.priceRange) {
    allPriceRanges.add(a.data.priceRange);
  }
});
---

<MainLayout 
  title={`${categoryName} - Salut Annecy`} 
  description={t('hero.search_placeholder')}
  lang={lang}
>
  <section class="page-header">
    <div class="container">
      <h1>{categoryName}</h1>
      <p class="subtitle">{t('hero.subtitle')}</p>
    </div>
  </section>

  <!-- Category Cards Section -->
  {!categoryFilter && accommodationCategories.length > 0 && (
    <section class="categories-section">
      <div class="container">
        <h2 class="section-title">Par catégorie</h2>
        <div class="categories-grid">
          {accommodationCategories
            .filter((cat: any) => !cat.data.parentId && cat.data.published)
            .sort((a, b) => (a.data.order || 0) - (b.data.order || 0))
            .map(category => (
              <Card 
                href={getLocalizedPath(`/hebergements/${category.data.slug}`, lang)} 
                hoverable={true}
                class="category-card"
              >
                <div class="category-content">
                  {category.data.icon && <Icon name={category.data.icon} size="xl" />}
                  <h3>{category.data.name}</h3>
                  {category.data.description && (
                    <p class="category-description">{category.data.description}</p>
                  )}
                </div>
              </Card>
            ))}
        </div>
      </div>
    </section>
  )}

  <section class="content-section">
    <div class="container">
      <!-- Filters Section -->
      <div class="filters-section">
        <h2 class="filters-title">{t('filters.filter_by')}</h2>
        <div class="filters-container">
          <!-- Attribute Filter -->
          <div class="filter-group">
            <label class="filter-label">{t('filters.attributes')}</label>
            <select 
              class="filter-select" 
              onchange="window.location.href = this.value"
            >
              <option value={getLocalizedPath(`/hebergements${categoryFilter ? `?cat=${categoryFilter}` : ''}`, lang)}>
                {t('filters.all')}
              </option>
              {Array.from(allAttributes).sort().map(attr => (
                <option 
                  value={getLocalizedPath(`/hebergements?${categoryFilter ? `cat=${categoryFilter}&` : ''}attr=${encodeURIComponent(attr)}`, lang)}
                  selected={attributeFilter === attr}
                >
                  {attr}
                </option>
              ))}
            </select>
          </div>

          <!-- Price Range Filter -->
          <div class="filter-group">
            <label class="filter-label">{t('filters.price_range')}</label>
            <select 
              class="filter-select" 
              onchange="window.location.href = this.value"
            >
              <option value={getLocalizedPath(`/hebergements${categoryFilter ? `?cat=${categoryFilter}` : ''}`, lang)}>
                {t('filters.all')}
              </option>
              {Array.from(allPriceRanges).sort().map(price => (
                <option 
                  value={getLocalizedPath(`/hebergements?${categoryFilter ? `cat=${categoryFilter}&` : ''}price=${price}`, lang)}
                  selected={priceFilter === price}
                >
                  {price}
                </option>
              ))}
            </select>
          </div>

          <!-- Rating Filter -->
          <div class="filter-group">
            <label class="filter-label">{t('filters.rating')}</label>
            <select 
              class="filter-select" 
              onchange="window.location.href = this.value"
            >
              <option value={getLocalizedPath(`/hebergements${categoryFilter ? `?cat=${categoryFilter}` : ''}`, lang)}>
                {t('filters.all')}
              </option>
              {[4.5, 4.0, 3.5, 3.0].map(rating => (
                <option 
                  value={getLocalizedPath(`/hebergements?${categoryFilter ? `cat=${categoryFilter}&` : ''}rating=${rating}`, lang)}
                  selected={ratingFilter === rating.toString()}
                >
                  {rating}+
                </option>
              ))}
            </select>
          </div>

          <!-- Clear Filters Button -->
          {(categoryFilter || attributeFilter || priceFilter || ratingFilter) && (
            <a href={getLocalizedPath('/hebergements', lang)} class="clear-filters-btn">
              {t('filters.clear_filters')}
            </a>
          )}
        </div>
        <p class="results-count">{t('filters.results_count').replace('{count}', accommodations.length.toString())}</p>
      </div>

      {accommodations.length > 0 ? (
        <div class="places-grid">
          {accommodations.map((place: any) => (
            <Card 
              href={getLocalizedPath(`/hebergements/${place.data.id}`, lang)} 
              hoverable={true}
              class="place-card"
            >
              <div class="place-image">
                <img src={place.data.imageUrl} alt={place.data.name} />
              </div>
              <div class="place-content">
                <div class="place-header">
                  <span class="place-category">{place.data.category}</span>
                  {place.data.rating && (
                    <div class="place-rating">
                      <Icon name="star" size="sm" />
                      <span>{place.data.rating.toFixed(1)}</span>
                    </div>
                  )}
                </div>
                <h3 class="place-name">{place.data.name}</h3>
                <p class="place-description">{place.data.description}</p>
                <div class="place-footer">
                  {place.data.address && (
                    <div class="place-info">
                      <Icon name="map-pin" size="sm" />
                      <span>{place.data.address}</span>
                    </div>
                  )}
                  {place.data.priceRange && (
                    <span class="place-price">{place.data.priceRange}</span>
                  )}
                </div>
              </div>
            </Card>
          ))}
        </div>
      ) : (
        <div class="empty-state">
          <Icon name="home" size="xl" />
          <h3>Aucun hébergement trouvé</h3>
          <p>Revenez bientôt pour découvrir nos recommandations !</p>
        </div>
      )}
    </div>
  </section>
</MainLayout>

<style>
  .page-header {
    background: linear-gradient(135deg, var(--color-primary-100), var(--color-secondary-100));
    padding: var(--spacing-12) 0 var(--spacing-8);
    text-align: center;
  }

  .page-header h1 {
    font-size: var(--font-size-4xl);
    margin-bottom: var(--spacing-3);
  }

  .subtitle {
    font-size: var(--font-size-lg);
    color: var(--color-text-secondary);
  }

  .categories-section {
    padding: var(--spacing-12) 0;
    background: var(--color-background);
  }

  .section-title {
    font-size: var(--font-size-2xl);
    margin-bottom: var(--spacing-6);
    color: var(--color-text-primary);
  }

  .categories-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: var(--spacing-6);
  }

  .category-card {
    background: var(--color-surface);
    border-radius: var(--radius-lg);
    padding: var(--spacing-6);
    transition: transform 0.2s, box-shadow 0.2s;
  }

  .category-card:hover {
    transform: translateY(-4px);
    box-shadow: var(--shadow-lg);
  }

  .category-content {
    text-align: center;
  }

  .category-content h3 {
    margin: var(--spacing-4) 0 var(--spacing-2);
    color: var(--color-text-primary);
  }

  .category-description {
    font-size: var(--font-size-sm);
    color: var(--color-text-secondary);
  }

  .content-section {
    padding: var(--spacing-12) 0;
  }

  .places-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
    gap: var(--spacing-6);
  }

  .place-card {
    height: 100%;
    display: flex;
    flex-direction: column;
  }

  .place-image {
    width: 100%;
    height: 200px;
    overflow: hidden;
    border-radius: var(--radius-lg) var(--radius-lg) 0 0;
    background-color: var(--color-surface-secondary);
  }

  .place-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .place-content {
    flex: 1;
    display: flex;
    flex-direction: column;
  }

  .place-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: var(--spacing-2);
  }

  .place-category {
    font-size: var(--font-size-sm);
    font-weight: var(--font-weight-semibold);
    color: var(--color-primary-600);
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .place-rating {
    display: flex;
    align-items: center;
    gap: var(--spacing-1);
    color: var(--color-warning-500);
    font-weight: var(--font-weight-semibold);
  }

  .place-name {
    font-size: var(--font-size-xl);
    margin-bottom: var(--spacing-2);
  }

  .place-description {
    flex: 1;
    color: var(--color-text-secondary);
    margin-bottom: var(--spacing-3);
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .place-footer {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: var(--spacing-3);
    padding-top: var(--spacing-3);
    border-top: 1px solid var(--color-border);
  }

  .place-info {
    display: flex;
    align-items: center;
    gap: var(--spacing-2);
    color: var(--color-text-secondary);
    font-size: var(--font-size-sm);
  }

  .place-price {
    font-weight: var(--font-weight-semibold);
    color: var(--color-primary-600);
  }

  .empty-state {
    text-align: center;
    padding: var(--spacing-12) var(--spacing-6);
    color: var(--color-text-secondary);
  }

  .empty-state h3 {
    margin: var(--spacing-4) 0 var(--spacing-2);
  }

  @media (max-width: 768px) {
    .places-grid {
      grid-template-columns: 1fr;
    }
  }
</style>
