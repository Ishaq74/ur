---
import MainLayout from '../../layouts/MainLayout.astro';
import Card from '../../components/molecules/Card.astro';
import Icon from '../../components/atoms/Icon.astro';
import { useTranslations, getLangFromUrl, getLocalizedPath } from '../../i18n';
import { getCollection, type CollectionEntry } from 'astro:content';

export async function getStaticPaths() {
  const allPlaceCategories = await getCollection('placeCategories');
  const allPlaces = await getCollection('places');
  
  // Only use French categories for routing (default language)
  const frenchCategories = allPlaceCategories.filter((cat) => cat.data.lang === 'fr');
  
  return frenchCategories.map(category => ({
    params: { category: category.data.slug },
    props: { 
      category,
      places: allPlaces.filter((place) => 
        place.data.mainCategory.id === category.data.id && place.data.published
      )
    },
  }));
}

type Props = {
  category: CollectionEntry<'placeCategories'>;
  places: CollectionEntry<'places'>[];
};

const { category, places }: Props = Astro.props;
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Collect all unique attributes for filter options
const allAttributes = new Set<string>();
const allPriceRanges = new Set<string>();
places.forEach((place) => {
  if (place.data.attributes) {
    place.data.attributes.forEach((attr: string) => allAttributes.add(attr));
  }
  if (place.data.priceRange) {
    allPriceRanges.add(place.data.priceRange);
  }
});
---

<MainLayout 
  title={`${category.data.name} - Salut Annecy`} 
  description={category.data.description}
  lang={lang}
>
  <section class="page-header">
    <div class="container">
      <nav class="breadcrumb">
        <a href={getLocalizedPath('/place', lang)}>Lieux</a>
        <span>/</span>
        <span>{category.data.name}</span>
      </nav>
      <h1>{category.data.name}</h1>
      <p class="subtitle">{category.data.description}</p>
    </div>
  </section>

  <section class="content-section">
    <div class="container">
      <div class="content-layout">
        <!-- Sidebar Filters (Attribute-based) -->
        {(allAttributes.size > 0 || allPriceRanges.size > 0) && (
          <aside class="filters-sidebar">
            <h2 class="sidebar-title">{t('filters.filter_by')}</h2>
            
            <!-- Attribute Filter -->
            {allAttributes.size > 0 && (
              <div class="filter-section">
                <h3 class="filter-title">{t('filters.attributes')}</h3>
                <div class="filter-options">
                  {Array.from(allAttributes).sort().map((attr: string) => (
                    <label class="filter-checkbox">
                      <input type="checkbox" value={attr} class="attribute-filter" />
                      <span>{attr}</span>
                    </label>
                  ))}
                </div>
              </div>
            )}

            <!-- Price Range Filter -->
            {allPriceRanges.size > 0 && (
              <div class="filter-section">
                <h3 class="filter-title">Gamme de prix</h3>
                <div class="filter-options">
                  {Array.from(allPriceRanges).sort().map((price: string) => (
                    <label class="filter-checkbox">
                      <input type="checkbox" value={price} class="price-filter" />
                      <span>{price}</span>
                    </label>
                  ))}
                </div>
              </div>
            )}
          </aside>
        )}

        <!-- Places Grid -->
        <div class="main-content">
          {places.length > 0 ? (
            <div class="places-grid" id="places-grid">
              {places.map((place: any) => (
                <Card 
                  href={getLocalizedPath(`/place/${place.data.id}`, lang)} 
                  hoverable={true}
                  class="place-card"
                  data-attributes={place.data.attributes ? place.data.attributes.join(',') : ''}
                  data-price={place.data.priceRange || ''}
                >
                  <div class="place-image">
                    <img src={place.data.imageUrl} alt={place.data.name} />
                  </div>
                  <div class="place-content">
                    <div class="place-header">
                      <span class="place-category">{place.data.category}</span>
                      {place.data.rating && (
                        <div class="place-rating">
                          <Icon name="star" size="sm" />
                          <span>{place.data.rating.toFixed(1)}</span>
                        </div>
                      )}
                    </div>
                    <h3 class="place-name">{place.data.name}</h3>
                    <p class="place-description">{place.data.description}</p>
                    <div class="place-footer">
                      {place.data.address && (
                        <div class="place-info">
                          <Icon name="map-pin" size="sm" />
                          <span>{place.data.address}</span>
                        </div>
                      )}
                      {place.data.priceRange && (
                        <span class="place-price">{place.data.priceRange}</span>
                      )}
                    </div>
                    {place.data.attributes && place.data.attributes.length > 0 && (
                      <div class="place-attributes">
                        {place.data.attributes.slice(0, 3).map((attr: string) => (
                          <span class="attribute-tag">{attr}</span>
                        ))}
                      </div>
                    )}
                  </div>
                </Card>
              ))}
            </div>
          ) : (
            <div class="empty-state">
              <Icon name={category.data.icon} size="xl" />
              <h3>Aucun résultat trouvé</h3>
              <p>Revenez bientôt pour découvrir nos recommandations !</p>
              <a href={getLocalizedPath('/place', lang)} class="back-link">
                Retour aux lieux
              </a>
            </div>
          )}
        </div>
      </div>
    </div>
  </section>
</MainLayout>

<script>
  // Client-side filtering by attributes and price
  document.addEventListener('DOMContentLoaded', () => {
    const attributeCheckboxes = document.querySelectorAll('.attribute-filter');
    const priceCheckboxes = document.querySelectorAll('.price-filter');
    const placesGrid = document.getElementById('places-grid');
    
    if (!placesGrid) return;
    
    const applyFilters = () => {
      const selectedAttributes = Array.from(attributeCheckboxes)
        .filter((cb: any) => cb.checked)
        .map((cb: any) => cb.value.toLowerCase());
      
      const selectedPrices = Array.from(priceCheckboxes)
        .filter((cb: any) => cb.checked)
        .map((cb: any) => cb.value);
      
      const places = placesGrid.querySelectorAll('.place-card');
      
      places.forEach((place: any) => {
        const placeAttributes = (place.getAttribute('data-attributes') || '')
          .toLowerCase()
          .split(',')
          .filter((a: string) => a.trim());
        
        const placePrice = place.getAttribute('data-price') || '';
        
        let show = true;
        
        // Check attribute filter
        if (selectedAttributes.length > 0) {
          const hasMatchingAttribute = selectedAttributes.some(attr => 
            placeAttributes.some((pa: string) => pa.includes(attr))
          );
          if (!hasMatchingAttribute) show = false;
        }
        
        // Check price filter
        if (selectedPrices.length > 0 && !selectedPrices.includes(placePrice)) {
          show = false;
        }
        
        place.style.display = show ? '' : 'none';
      });
    };
    
    attributeCheckboxes.forEach(cb => cb.addEventListener('change', applyFilters));
    priceCheckboxes.forEach(cb => cb.addEventListener('change', applyFilters));
  });
</script>

<style>
  .page-header {
    background: linear-gradient(135deg, var(--color-primary-100), var(--color-secondary-100));
    padding: var(--spacing-12) 0 var(--spacing-8);
    text-align: center;
  }

  .breadcrumb {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: var(--spacing-2);
    font-size: var(--font-size-sm);
    margin-bottom: var(--spacing-4);
    color: var(--color-text-secondary);
  }

  .breadcrumb a {
    color: var(--color-primary-600);
    text-decoration: none;
  }

  .breadcrumb a:hover {
    text-decoration: underline;
  }

  .page-header h1 {
    font-size: var(--font-size-4xl);
    margin-bottom: var(--spacing-3);
  }

  .subtitle {
    font-size: var(--font-size-lg);
    color: var(--color-text-secondary);
  }

  .content-section {
    padding: var(--spacing-12) 0;
  }

  .content-layout {
    display: grid;
    grid-template-columns: 280px 1fr;
    gap: var(--spacing-8);
  }

  .filters-sidebar {
    background: var(--color-surface);
    padding: var(--spacing-6);
    border-radius: var(--radius-lg);
    height: fit-content;
    position: sticky;
    top: var(--spacing-8);
  }

  .sidebar-title {
    font-size: var(--font-size-lg);
    margin-bottom: var(--spacing-4);
    color: var(--color-text-primary);
  }

  .filter-section {
    margin-bottom: var(--spacing-6);
  }

  .filter-title {
    font-size: var(--font-size-md);
    font-weight: 600;
    margin-bottom: var(--spacing-3);
    color: var(--color-text-primary);
  }

  .filter-options {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-2);
  }

  .filter-checkbox {
    display: flex;
    align-items: center;
    gap: var(--spacing-2);
    padding: var(--spacing-2);
    cursor: pointer;
  }

  .filter-checkbox:hover {
    background: var(--color-primary-50);
    border-radius: var(--radius-md);
  }

  .filter-checkbox input[type="checkbox"] {
    cursor: pointer;
  }

  .main-content {
    min-width: 0;
  }

  .places-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
    gap: var(--spacing-6);
  }

  .place-card {
    height: 100%;
    display: flex;
    flex-direction: column;
  }

  .place-image {
    width: 100%;
    height: 200px;
    overflow: hidden;
    border-radius: var(--radius-lg) var(--radius-lg) 0 0;
    background-color: var(--color-surface-secondary);
  }

  .place-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .place-content {
    flex: 1;
    display: flex;
    flex-direction: column;
  }

  .place-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: var(--spacing-2);
  }

  .place-category {
    font-size: var(--font-size-sm);
    font-weight: var(--font-weight-semibold);
    color: var(--color-primary-600);
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .place-rating {
    display: flex;
    align-items: center;
    gap: var(--spacing-1);
    color: var(--color-warning-500);
    font-weight: var(--font-weight-semibold);
  }

  .place-name {
    font-size: var(--font-size-xl);
    margin-bottom: var(--spacing-2);
  }

  .place-description {
    flex: 1;
    color: var(--color-text-secondary);
    margin-bottom: var(--spacing-3);
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .place-footer {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: var(--spacing-3);
    padding-top: var(--spacing-3);
    border-top: 1px solid var(--color-border);
  }

  .place-info {
    display: flex;
    align-items: center;
    gap: var(--spacing-2);
    color: var(--color-text-secondary);
    font-size: var(--font-size-sm);
  }

  .place-price {
    font-weight: var(--font-weight-semibold);
    color: var(--color-primary-600);
  }

  .place-attributes {
    display: flex;
    gap: var(--spacing-2);
    flex-wrap: wrap;
    margin-top: var(--spacing-3);
  }

  .attribute-tag {
    font-size: var(--font-size-xs);
    padding: var(--spacing-1) var(--spacing-2);
    background: var(--color-primary-100);
    color: var(--color-primary-600);
    border-radius: var(--radius-sm);
  }

  .empty-state {
    text-align: center;
    padding: var(--spacing-12) var(--spacing-6);
    color: var(--color-text-secondary);
  }

  .empty-state h3 {
    margin: var(--spacing-4) 0 var(--spacing-2);
  }

  .back-link {
    display: inline-block;
    padding: var(--spacing-3) var(--spacing-6);
    background: var(--color-primary-600);
    color: white;
    border-radius: var(--radius-md);
    text-decoration: none;
    transition: background-color 0.2s;
    margin-top: var(--spacing-4);
  }

  .back-link:hover {
    background: var(--color-primary-700);
  }

  @media (max-width: 1024px) {
    .content-layout {
      grid-template-columns: 1fr;
    }

    .filters-sidebar {
      position: static;
    }
  }

  @media (max-width: 768px) {
    .page-header h1 {
      font-size: var(--font-size-3xl);
    }

    .places-grid {
      grid-template-columns: 1fr;
    }
  }
</style>
